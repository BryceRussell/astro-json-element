---
export interface Props {
    tag?: string;
    slot?: "first"|"before"|"after"|"last";
    text?: string;
    innerHTML?: string;
    debug?: boolean;
    [attrs: string]: any;
}

const {
    tag:Tag="div",
    slot="last",
    text,
    innerHTML,
    debug,
    ...attrs
} = Astro.props as Props

var children = [];

function omit(obj) {
    //returns a list of attributes that will show up in html Ex: <h1 key1="value1" key2="value2"></h1>
    Object.keys(obj).forEach((key) => {
        //Omit keys from being added as attributes
        if (key == "class") delete obj[key]
        //If key is _child Element add it to que for rendering and omit it from attributes
        if (key.startsWith('_') && obj[key] != false && typeof obj[key] != 'undefined') {
            children.push(obj[key]);
            delete obj[key];
        }
    })
  return obj;
}

if (debug) console.log(Astro.props);
---

<Tag class:list={attrs.class} {...omit(attrs)}>
    <slot name="first"/>
    { children && children.map((e, i) => {
        if (e.slot == "first") {
            delete children[i]
            return <Astro.self {...e} />
        }
    })}
    {text && text}
    { children && children.map((e, i) => {
        if (e.slot == "before") {
            delete children[i]
            return <Astro.self {...e} />
        }
    })}
    <slot />
    { children && children.map((e, i) => {
        if (e.slot == "after") {
            delete children[i]
            return <Astro.self {...e} />
        }
    })}
    <Fragment set:html={innerHTML}/>
    { children && children.map((e) => {
        return <Astro.self {...e} />
    })}
    <slot name="last"/>
</Tag>