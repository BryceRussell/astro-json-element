---
export interface Props {
    tag?: string;
    slot?: "first"|"before"|"after"|"last";
    text?: string;
    innerHTML?: string;
    defaults?: Props;
    debug?: boolean;
    [attrs: string]: any;
}

const default_slot = "last";

const {
    tag:Tag="div",
    slot=default_slot,
    text,
    innerHTML,
    defaults,
    debug,
    ...attrs
} = Astro.props as Props

interface Children {
    [attrs: string]: Array<Props>;
};

var children: Children = {
    first: [],
    before: [],
    after: [],
    last: []
};

function omit(obj) {
    //returns object of attributes that will show up in html Ex: <h1 key1="value1" key2="value2"></h1>
    Object.keys(obj).forEach((key) => {
        //Remove class since it is deinfed using class:list directive
        if (key == "class") delete obj[key]

        //Check if key is a _child element
        if (key.startsWith('_') && obj[key] != false && typeof obj[key] != 'undefined') {
            obj[key].slot?
            //if slot push to slot table
            children[obj[key].slot].push(obj[key]):
            //no slot use default
            children[default_slot].push(obj[key])
            //Stop element from being displayed as attribute
            delete obj[key];
        }
    })
  return obj;
}

if (debug) console.log(Astro.props);
---

<Tag class:list={attrs.class} {...omit(attrs)}>
    <slot name="first"/>
    { children.first && children.first.map((e) => {return <Astro.self {...{...defaults, ...e}} />})}
    {text && text}
    { children.before && children.before.map((e) => {return <Astro.self {...{...defaults, ...e}} />})}
    <slot />
    { children.after && children.after.map((e) => {return <Astro.self {...{...defaults, ...e}} />})}
    {innerHTML && <Fragment set:html={innerHTML}/>}
    { children.last && children.last.map((e) => {return <Astro.self {...{...defaults, ...e}} />})}
    <slot name="last"/>
</Tag>